/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main_calc.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dlesieur <dlesieur@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/07/28 17:14:23 by dlesieur          #+#    #+#             */
/*   Updated: 2025/07/28 17:14:24 by dlesieur         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "err_handler.h"
#include <stdio.h>

#define ERR_OK 0
#define ERR_DIV_ZERO 200
#define ERR_NEGATIVE_INPUT 201

void	init_calc_errors(t_interface *reg)
{
	reg->add_message(reg, ERR_DIV_ZERO, "Division by zero");
	reg->add_message(reg, ERR_NEGATIVE_INPUT, "Negative input not allowed");
}

int	safe_divide(double a, double b, double *result)
{
	if (b == 0.0)
		return (ERR_DIV_ZERO);
	if (a < 0 || b < 0)
		return (ERR_NEGATIVE_INPUT);
	*result = a / b;
	return (ERR_OK);
}

// Prototypes for utils
double	util_divide_positive(double a, double b, t_handler *err);
double	util_divide_force_zero(double a, t_handler *err);

int	main(void)
{
	t_interface	*reg;
	t_handler	*err;
	double		res;

	reg = err_default_registry();
	err = err_handler_create();
	init_calc_errors(reg);
	err->last_error = safe_divide(10, 0, &res);
	if (err->last_error != ERR_OK)
		print_error(err, __FILE__, __func__, __LINE__);
	else
		printf("Result: %f\n", res);
	err->last_error = safe_divide(-5, 2, &res);
	if (err->last_error != ERR_OK)
		print_error(err, __FILE__, __func__, __LINE__);
	else
		printf("Result: %f\n", res);
	err->last_error = safe_divide(10, 2, &res);
	if (err->last_error != ERR_OK)
		print_error(err, __FILE__, __func__, __LINE__);
	else
		printf("Result: %f\n", res);
	res = util_divide_positive(-10, 2, err);
	res = util_divide_positive(10, 0, err);
	res = util_divide_force_zero(5, err);
	err_handler_destroy(err);
	return (0);
}
